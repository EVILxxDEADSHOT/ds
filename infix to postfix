#include<ctype.h>
#include <stdio.h>
#define max 100
char stack[max];
int top=-1;

void infixtopostfix(char source[],char output[]);
void push(char a);
char pop();
int priority(char x);
int main()
{
    char s[100],o[100];
    printf("Enter a infix expression:");
    scanf("%s",s);
    infixtopostfix(s,o);
    printf("\npostfix expression:%s",o);
    return 0;
}

void push(char a)
{
    top++;
    stack[top]=a;
}
char pop()
{
    char x;
    x=stack[top];
    top--;
    return x;
}

void infixtopostfix(char source[100],char output[100])
{
    int i=0,j=0;
    while(source[i]!='\0')
    {
        if(source[i]=='(')
        {
            push('(');
            i++;
        }
        else if(source[i]==')')
        {
            while((stack[top]!='(')&&(top!=-1) )
            {
                output[j]=pop();
                j++;
            }
            if(top==-1)
            {
                printf("invalid expression");
                break;
            }
            char temp=pop();
            i++;
        }
        else if(source[i]=='+'|| source[i]=='-'||source[i]=='*'||source[i]=='/'||source[i]=='^'||source[i]=='%')
        {
            while((top!=-1&&stack[top]!='(')&&(priority(stack[top])>=priority(source[i])))
            {
                output[j]=pop();
                j++;
            }
            push(source[i]);
            i++;
        }
        else if(isalpha(source[i])||isdigit(source[i]))
        {
            output[j]=source[i];
            i++;
            j++;
        }
    }
    while((top!=-1)&&(stack[top])!='(')
    {
        output[j]=pop();
        j++;
    }
    output[j]='\0';
}
int priority(char x)
{
    if(x=='^')
    return 2;
    else if(x=='*'|| x=='%'||x=='/')
    return 1;
    else if(x=='+'||x=='-')
    return 0;
}
